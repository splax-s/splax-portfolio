apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: portfolio-template
  annotations:
    description: "Template for deploying Portfolio application on OpenShift"
    tags: "nodejs,nextjs,portfolio"
    iconClass: "icon-nodejs"
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    lookupPolicy:
      local: false

- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-build
    labels:
      app: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: ${GIT_REPOSITORY}
        ref: ${GIT_BRANCH}
      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile.openshift
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${WEBHOOK_SECRET}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        deployment: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          deployment: ${APPLICATION_NAME}
      spec:
        containers:
        - name: ${APPLICATION_NAME}
          image: ${APPLICATION_NAME}:latest
          env:
          - name: NODE_ENV
            value: ${NODE_ENV}
          - name: PORT
            value: "8080"
          - name: HOSTNAME
            value: "0.0.0.0"
          - name: NEXT_TELEMETRY_DISABLED
            value: "1"
          ports:
          - containerPort: 8080
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              memory: ${MEMORY_REQUEST}
              cpu: ${CPU_REQUEST}
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: ${CPU_LIMIT}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001

- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deployment: ${APPLICATION_NAME}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    host: ${ROUTE_HOST}
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100

parameters:
- name: APPLICATION_NAME
  description: "Name of the application"
  value: portfolio
  required: true

- name: GIT_REPOSITORY
  description: "Git repository URL"
  value: https://github.com/splax-s/splax-portfolio.git
  required: true

- name: GIT_BRANCH
  description: "Git branch to build from"
  value: main
  required: true

- name: WEBHOOK_SECRET
  description: "GitHub webhook secret"
  generate: expression
  from: "[a-zA-Z0-9]{20}"

- name: NODE_ENV
  description: "Node environment"
  value: production
  required: true

- name: REPLICAS
  description: "Number of replicas"
  value: "1"
  required: true

- name: MEMORY_REQUEST
  description: "Memory request"
  value: "256Mi"
  required: true

- name: MEMORY_LIMIT
  description: "Memory limit"
  value: "512Mi"
  required: true

- name: CPU_REQUEST
  description: "CPU request"
  value: "200m"
  required: true

- name: CPU_LIMIT
  description: "CPU limit"
  value: "500m"
  required: true

- name: ROUTE_HOST
  description: "Route hostname (leave empty for auto-generated)"
  value: "portfolio.apps.test.mtnn.cloud"

labels:
  template: portfolio-template
